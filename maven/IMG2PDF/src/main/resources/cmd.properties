convert.import_tasklists = Import tasklist:
convert.listener.converting = [%s] %s %d/%d images added %s
convert.listener.done = [Done][%d s] %s
convert.listener.err.conversion = Conversion Fail:%s
convert.listener.err.image = Reading image Fail:%s
convert.listener.err.overwrite = [File is already exist,nothing change] %s
convert.listener.progress = Progress:
convert.start_conversion = Start conversion!!!

execution.convert.handler.conversion.conversion = Conversion error: %s
execution.convert.handler.conversion.overwrite=Overwrite deny: %s
execution.convert.handler.conversion.read_image=Image read error: %s
execution.convert.handler.tasklist.no_task = No task was found in: %s
execution.convert.handler.tasklist.not_found = TaskList file not found: %s
execution.convert.handler.tasklist.wrong_type=Path should be a %s,but was '%s': %s
execution.create.handler.dirlist.not_found=Dirlist file not found: %s
execution.create.handler.dirlist.wrong_type=Path should be a %s,but was '%s': %s
execution.create.handler.overwrite=Overwrite deny: %s
execution.create.handler.save = Unable to save: %s
execution.create.handler.source.empty_image = No image was found in %s.
execution.create.handler.source.not_found = Source file not found: %s
execution.create.handler.source.wrong_type = Path should be a %s,but was '%s': %s
parameter.handler.missing_required.option = Missing required options: '%s'
parameter.handler.missing_required.parameter = Missing required parameters: '%s'
parameter.handler.try_help = "Try '%s --help' for more information.
parameter.handler.type_convert.enum = Invalid value for %s '%s': expected one of [%s] (case-sensitive) but was '%s'
parameter.handler.type_convert.normal = Invalid value for %s '%s': %s(invalid value)
parameter.handler.unmatched_argument.unknown_option=Unknown options: %s

help = Getting more information

img2pdf.convert.<tasklist_sources>[0.*] = Tasklist path
img2pdf.convert.memory_max_usage = Max usage of memory.(default:${DEFAULT-VALUE})
img2pdf.convert.open_when_complete = Open PDF when conversion is completed.
img2pdf.convert.overwrite = Overwrite existing file.
img2pdf.convert.tasklist_source = TaskList file(*.xml)
img2pdf.convert.temp_folder = Temp files location.(default:${DEFAULT-VALUE})
img2pdf.convert.usage.header = Merge multiple images to pdf file by declared TaskList.
img2pdf.create.<sourceFiles>[0..*] = Source file that contain several line of directory path.
img2pdf.create.filter = Filter for image files.Using Regular expressions.(default:${DEFAULT-VALUE})
img2pdf.create.list_destination = Output destination task list(*.XML).
img2pdf.create.overwrite_tasklist = Overwrite TaskList file even it is exists.
img2pdf.create.pdf_align = Alignment of page of pdf.(default:${DEFAULT-VALUE})
img2pdf.create.pdf_auto_rotate = Auto rotate each page.
img2pdf.create.pdf_destination = Destination of converted file.
img2pdf.create.pdf_direction.0 = Image direction of each page of pdf.(default:${DEFAULT-VALUE})
img2pdf.create.pdf_direction.1 = Available options: ${COMPLETION-CANDIDATES}
img2pdf.create.pdf_owner_password = PDF owner password.
img2pdf.create.pdf_permission = Access permission of document.default:${DEFAULT-VALUE}
img2pdf.create.pdf_size.0 = Each page size of pdf.Type DEPEND to set each page size depend on each image size.
img2pdf.create.pdf_size.1 = Available options: ${COMPLETION-CANDIDATES}img2pdf.create.pdf_user_password = PDF user password.
img2pdf.create.sorter = Specify the sort pattern.(default:${DEFAULT-VALUE})
img2pdf.create.source = Source files.
img2pdf.create.usage.header = Create a xml file including the source file path,document configuration and page configuration.
img2pdf.debug = Open debug mode.
img2pdf.usage.header = This program can convert multiple image into pdf.
img2pdf.version = Print version information and exit.

public.file.type.file = file
public.file.type.folder = folder
public.exported = Exported
public.imported = Imported
public.importing = Importing
public.option = option
public.parameter = parameter


